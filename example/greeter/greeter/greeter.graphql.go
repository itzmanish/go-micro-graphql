// Code generated by proroc-gen-graphql, DO NOT EDIT.
package greeter

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/itzmanish/go-micro/v2/client"
	"github.com/itzmanish/micro-graphql-gateway/runtime"
	"github.com/pkg/errors"
)

var (
	gql__type_HelloRequest    *graphql.Object      // message HelloRequest in greeter.proto
	gql__type_HelloReply      *graphql.Object      // message HelloReply in greeter.proto
	gql__type_GoodbyeRequest  *graphql.Object      // message GoodbyeRequest in greeter.proto
	gql__type_GoodbyeReply    *graphql.Object      // message GoodbyeReply in greeter.proto
	gql__input_HelloRequest   *graphql.InputObject // message HelloRequest in greeter.proto
	gql__input_HelloReply     *graphql.InputObject // message HelloReply in greeter.proto
	gql__input_GoodbyeRequest *graphql.InputObject // message GoodbyeRequest in greeter.proto
	gql__input_GoodbyeReply   *graphql.InputObject // message GoodbyeReply in greeter.proto
)

func Gql__type_HelloRequest() *graphql.Object {
	if gql__type_HelloRequest == nil {
		gql__type_HelloRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_HelloRequest",
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `Below line means the "name" field is required in GraphQL argument`,
				},
			},
		})
	}
	return gql__type_HelloRequest
}

func Gql__type_HelloReply() *graphql.Object {
	if gql__type_HelloReply == nil {
		gql__type_HelloReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_HelloReply",
			Fields: graphql.Fields{
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_HelloReply
}

func Gql__type_GoodbyeRequest() *graphql.Object {
	if gql__type_GoodbyeRequest == nil {
		gql__type_GoodbyeRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_GoodbyeRequest",
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type:        graphql.NewNonNull(graphql.String),
					Description: `Below line means the "name" field is required in GraphQL argument`,
				},
			},
		})
	}
	return gql__type_GoodbyeRequest
}

func Gql__type_GoodbyeReply() *graphql.Object {
	if gql__type_GoodbyeReply == nil {
		gql__type_GoodbyeReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Greeter_Type_GoodbyeReply",
			Fields: graphql.Fields{
				"message": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_GoodbyeReply
}

func Gql__input_HelloRequest() *graphql.InputObject {
	if gql__input_HelloRequest == nil {
		gql__input_HelloRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_HelloRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Description: `Below line means the "name" field is required in GraphQL argument`,
					Type:        graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_HelloRequest
}

func Gql__input_HelloReply() *graphql.InputObject {
	if gql__input_HelloReply == nil {
		gql__input_HelloReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_HelloReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_HelloReply
}

func Gql__input_GoodbyeRequest() *graphql.InputObject {
	if gql__input_GoodbyeRequest == nil {
		gql__input_GoodbyeRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_GoodbyeRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Description: `Below line means the "name" field is required in GraphQL argument`,
					Type:        graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_GoodbyeRequest
}

func Gql__input_GoodbyeReply() *graphql.InputObject {
	if gql__input_GoodbyeReply == nil {
		gql__input_GoodbyeReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Greeter_Input_GoodbyeReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"message": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_GoodbyeReply
}

// graphql__resolver_Greeter is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_Greeter struct {
	serviceName string
	client      client.Client
	// grpc client connection.
	// this connection may be provided by user
	conn GreeterService
}

// new_graphql_resolver_Greeter creates pointer of service struct
func new_graphql_resolver_Greeter(name string, c client.Client) *graphql__resolver_Greeter {
	return &graphql__resolver_Greeter{
		serviceName: name,
		client:      c,
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_Greeter) CreateConnection(ctx context.Context) interface{} {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn
	}

	// Otherwise, this handler opens connection with specified host
	conn := NewGreeterService(x.serviceName, x.client)
	x.conn = conn
	return conn
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_Greeter) GetQueries(service interface{}) graphql.Fields {
	return graphql.Fields{
		"hello": &graphql.Field{
			Type: Gql__type_HelloReply(),
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					Description:  `Below line means the "name" field is required in GraphQL argument`,
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req HelloRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for hello")
				}
				resp, err := service.(GreeterService).SayHello(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC SayHello")
				}
				return resp, nil
			},
		},
		"goodbye": &graphql.Field{
			Type: Gql__type_GoodbyeReply(),
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					Description:  `Below line means the "name" field is required in GraphQL argument`,
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req GoodbyeRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for goodbye")
				}
				resp, err := service.(GreeterService).SayGoodbye(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC SayGoodbye")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_Greeter) GetMutations(service interface{}) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterGreeterGraphqlHandler with *grpc.ClientConn manually.
func RegisterGreeterGraphql(mux *runtime.ServeMux, name string) error {
	return RegisterGreeterGraphqlHandler(mux, name, client.DefaultClient)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service Greeter {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterGreeterGraphqlHandler(mux *runtime.ServeMux, name string, client client.Client) error {
	return mux.AddHandler(new_graphql_resolver_Greeter(name, client))
}
